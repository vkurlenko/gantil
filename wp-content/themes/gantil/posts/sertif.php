<?php

// Регистрация таксономии:
add_action( 'init', 'create_taxsertif', 0 );
function create_taxsertif() {
    $args = array(
        'label' => _x( 'Категории сертификатов', 'taxonomy general name' ), // Название таксономии во множественном числе для перевода. По умолчанию: значение аргумента 'name' массива 'labels'.
        // Массив значений таксономии для управления в админ-панели:
        'labels' => array(
            'name' => _x( 'Категории сертификатов', 'taxonomy general name' ), // Общее название таксономии, используется во множественном числе. Соответствует значению label. По умолчанию: _x( 'Метки', 'taxonomy general name' ) или _x( 'Рубрики', 'taxonomy general name' ).
            'singular_name' => _x( 'Категория сертификата', 'taxonomy singular name' ), // Название таксономии в единственном числе. По умолчанию: _x( 'Метка', 'taxonomy singular name' ) или _x( 'Рубрика', 'taxonomy singular name' ).
            'menu_name' => __( 'Категории сертификатов' ), // Название таксономии в пункте меню. Если не задается, то используется значение label. По умолчанию: 'Метки' или 'Рубрики'.
            'all_items' => __( 'Все категории сертификатов' ), // Текст всех таксономий. По умолчанию: __( 'Все метки' ) или __( 'Все рубрики' ).
            'edit_item' => __( 'Изменить категорию сертификата' ), // Текст изменения таксономии на странице ее редактирования. По умолчанию: __( 'Изменить метку' ) или __( 'Изменить рубрику' ).
            'view_item' => __( 'Просмотреть категорию сертификатов' ), // Текст просмотра таксономии, который появляется в навигационном баре админ-панели на странице редактирования данной таксономии. По умолчанию: __( 'Просмотреть метку' ) или __( 'Просмотреть рубрику' ).
            'update_item' => __( 'Обновить категорию сертификатов' ), // Текст обновления таксономии во вкладке свойства. По умолчанию: __( 'Обновить метку' ) или __( 'Обновить рубрику' ).
            'add_new_item' => __( 'Добавить новую категорию сертификатов' ), // Текст добавления новой таксономии при ее создании. По умолчанию: __( 'Добавить новую метку' ) или __( 'Добавить новую рубрику' ).
            'new_item_name' => __( 'Название' ), // Название таксономии при ее создании и редактировании. По умолчанию: __( 'Название' ).
            'parent_item' => __( 'Родительская' ), // Текст родительской таксономии при создании и редактировании. Для древовидных таксономий. По умолчанию: __( 'Родительская' ).
            'parent_item_colon' => __( 'Родительская:' ), // То же, что и parent_item, но с добавлением двоеточия. По умолчанию: __( 'Родительская:' )
            'search_items' => __( 'Поиск категорий сертификатов' ), // Текст в кнопке поиска на странице всех таксономий. По умолчанию: __( 'Поиск меток' ) или __( 'Поиск рубрик' ).
            'popular_items' => null, // Надпись популярных таксономий (на странице всех таксономий). Этот параметр не используется для древовидных таксономий. По умолчанию: __( 'Популярные метки' ) или null.
            'separate_items_with_commas' => null, // Надпись разделения таксономий запятыми в метабоксе. Этот параметр не используется для древовидных таксономий. По умолчанию: __( 'Метки разделяются запятыми' ) или null.
            'add_or_remove_items' => null, // Надпись добавления или удаления таксономий в метабоксе когда JavaScript отключен. Этот параметр не используется для древовидных таксономий. По умолчанию: __( 'Добавить' ) или null.
            'choose_from_most_used' => null, // Текст выбора из часто используемых таксономий в метабоксе. Этот параметр не используется для древовидных таксономий. По умолчанию: __( 'Выбрать из часто используемых' ) или null.
            'not_found' => __( 'Категорий новостей не найдено.' ), // Текст в случае, если запрашиваемая таксономия не найдена. По умолчанию: __( 'Меток не найдено.' ) или __( 'Рубрик не найдено.' ).
        ),
        'public' => true, // Если true, то таксономия становится доступной для использования.
        'show_ui' => true, // Доступность таксономии для управления в админ-панели. По умолчанию: если не задано, то значение аргумента 'public'.
        'show_in_menu' => true, // Показывать таксономию в админ-меню. От параметра 'show_ui' отличается тем, что 'show_ui' делает доступным управление таксономией в админ-панели, но не показывает ее в меню. Значение аргумента 'show_ui' должно быть true. По умолчанию: значение аргумента 'show_ui'.
        'show_in_nav_menus' => true, // True делает возможным добавление или исключение таксономии в навигационном меню сайта во вкладке Внешний вид -> Меню. По умолчанию: если не задано, то значение аргумента 'public'.
        'show_tagcloud' => true, // Позволяет виджет 'Облако меток' использовать в таксономии. Виджет 'Облако меток; показывает список меток на странице записи (поста). Чем чаще используется метка, тем крупнее будет ее написание. По умолчанию: если не задано, то значение аргумента 'show_ui'.
        'show_in_quick_edit' => true, // Показ таксономии в меню быстрого доступа. По умолчанию: если не задано, то значение аргумента 'show_ui'.
        'meta_box_cb' => null, // Обеспечивает показ метабокса с таксономией в записи. По умолчанию: null.
        'show_admin_column' => false, // Позволяет автоматическое создание столбцов таксономии в таблице ассоциативных типов постов. По умолчанию: false.
        'description' => '', // Подключает описание таксономии в таблице со всеми таксономиями. По умолчанию: ''
        'hierarchical' => true, // Делает таксономию древовидной как рубрики или недревовидной как метки. По умолчанию: false.
        'update_count_callback' => '', // Название функции, которую вызовут, когда количество ассоциативных типов объектов, таких как запись (пост), будет обновлено. Действует во многом как хук. По умолчанию: ''.
        'query_var' => true, // Значение запроса. False, чтобы отключить. Можно задать свое значение. По умолчанию: true.
        // Перезапись URL. По умолчанию: true.
        'rewrite' => array(
            'slug' => 'taxsertif', // Текст в ЧПУ. По умолчанию: название таксономии.
            'with_front' => false, // Позволяет ссылку добавить к базовому URL.
            'hierarchical' => true, // Использовать (true) или не использовать (false) древовидную структуру ссылок. По умолчанию: false.
            'ep_mask' => EP_NONE, // Перезаписывает конечное значение таксономии. По умолчанию: EP_NONE.
        ),
        /*
        Массив полномочий зарегестрированных пользователей:
        'capabilities' => array(
            'manage_terms' => 'manage_resource',
            'edit_terms'   => 'manage_categories',
            'delete_terms' => 'manage_categories',
            'assign_terms' => 'edit_posts',
        ),
        */
        'sort' => null, // Должна ли таксономия запоминать порядок, в котором посты были созданы. По умолчанию: null.
        '_builtin' => false, // Является ли таксономия собственной или встроенной. Рекомендация: не использовать этот аргумент при регистрации собственной таксономии. По умолчанию: false.
    );
    register_taxonomy( 'taxsertif', array('sertif'), $args );
}

// Регистрация пользовательского типа записи:
add_action( 'init', 'register_post_sertif', 0 );
function register_post_sertif() {
    $args = array(
        'label'  => _x( 'Сертификаты', 'Post Type General Name', 'text_domain' ), // Название пользовательского типа записи во множественном числе. По умолчанию: значение аргумента 'name' массива 'labels'.
        'labels' => array(
            'name' => _x( 'Сертификаты', 'Post Type General Name', 'text_domain' ), // Общее название пользовательского типа записи во множественном числе. Переопределяет значение 'label'. По умолчанию: _x( 'Записи', 'Post Type General Name', 'text_domain' ) или _x( 'Страницы', 'Post Type General Name', 'text_domain' ).
            'singular_name' => _x( 'Сертификат', 'Post Type Singular Name', 'text_domain' ), // Название пользовательского типа записи в единственном числе. По умолчанию: _x( 'Запись', 'Post Type Singular Name', 'text_domain' ) или _x( 'Страница', 'Post Type Singular Name', 'text_domain' ).
            'add_new' => __( 'Добавить новый', 'text_domain' ), // Текст добавления нового объекта типа записи в разделе 'Записи'/'Страницы' в админ-панели. По умолчанию: __( 'Добавить новую', 'text_domain' ).
            'add_new_item' => __( 'Добавить сертификат', 'text_domain' ), // Текст добавления нового объекта типа записи на странице создания. По умолчанию: __( 'Добавить запись', 'text_domain' ) или __( 'Добавить страницу', 'text_domain' ).
            'edit_item' => __( 'Редактировать сертификат', 'text_domain' ), // Текст редактирования объекта типа записи на странице редактирования. По умолчанию: __( 'Редактировать запись', 'text_domain' ) или __( 'Редактировать страницу', 'text_domain' ).
            'new_item' => __( 'Новый сертификат', 'text_domain' ), // Текст новой объекта типа записи. По умолчанию: __( 'Новая запись', 'text_domain' ) или __( 'Новая страница', 'text_domain' ).
            'view_item' => __( 'Просмотреть сертификат', 'text_domain' ), // Текст просмотра типа записи в админ-баре. По умолчанию: __( 'Просмотреть запись', 'text_domain' ) или __( 'Просмотреть страницу', 'text_domain' ).
            'search_items' => __( 'Поиск сертификатов', 'text_domain' ), // Текст на кнопке поиска объектов данного типа записи. По умолчанию: __( 'Поиск записей', 'text_domain' ) или __( 'Поиск страниц', 'text_domain' ).
            'not_found' => __( 'Сертификатов не найдено', 'text_domain' ), // Текст в случае отрицательного результата поиска объектов данного типа записи. По умолчанию: __( 'Записей не найдено', 'text_domain' ) или __( 'Страниц не найдено', 'text_domain' ).
            'not_found_in_trash' => __( 'Сертификат в корзине не найдено', 'text_domain' ), // Текст в случае отрицательного результата поиска объектов данного типа записи в корзине. По умолчанию: __( 'Записей в корзине не найдено', 'text_domain' ) или __( 'Страниц в корзине не найдено', 'text_domain' ).
            'parent_item_colon' => null, // Текст при выборе родительской страницы. Данный аргумент применяется только для древовидных типов записи. По умолчанию: __( 'Родительская:', 'text_domain' ).
            'all_items' => __( 'Все сертификаты', 'text_domain' ), // Текст всех объектов типа записи в подменю. По умолчанию: __( 'Все записи', 'text_domain' ) или __( 'Все страницы', 'text_domain' ).
            'archives' => __( 'Архивы сертификатов', 'text_domain' ), // Текст архивов типа записи. По умолчанию: __( 'Архивы записей', 'text_domain' ) или __( 'Архивы страниц', 'text_domain' ).
            'insert_into_item' => __( 'Вставить в сертификат', 'text_domain' ), // Текст добавления медиафайлов в объект типа записи во вкладке 'Добавить медиазапись'. По умолчанию: __( 'Вставить в запись', 'text_domain' ) или __( 'Вставить в страницу', 'text_domain' ).
            'uploaded_to_this_item' => _x( 'Загружен для:', 'text_domain' ), // Используется при просотре медиафайлов, прикрепленных к данному типу записи. По умолчанию: _x( 'Загружен для:', 'text_domain' ).
            'featured_image' => __( 'Миниатюра сертификата', 'text_domain' ), // Текст в метабоксе миниатюры на странице редактирования типа записи. По умолчанию: __( 'Миниатюра записи', 'text_domain' ).
            'set_featured_image' => __( 'Задать миниатюру', 'text_domain' ), // Текст для загрузки миниатюры. По умолчанию: __( 'Задать миниатюру', 'text_domain' ).
            'remove_featured_image' => __( 'Удалить миниатюру', 'text_domain' ), // Текст для удаления миниатюры. По умолчанию: __( 'Удалить миниатюру', 'text_domain' ).
            'use_featured_image' => __( 'Использовать миниатюру', 'text_domain' ), // По умолчанию: __( 'Использовать миниатюру', 'text_domain' ).
            'menu_name' => __( 'Сертификаты', 'text_domain' ), // Текст в пункте меню. По умолчанию: значение аргумента 'name'.
            'name_admin_bar' => __( 'Сертификат', 'text_domain' ), // Текст в админ-баре во вкладке 'Добавить'. По умолчанию: значение аргумента 'singular_name'.
            'items_list' => __( 'Список сертификатов', 'text_domain' ), // Текст Screen reader в заголовке в разделе всех записей/страниц. По умолчанию: __( 'Список записей', 'text_domain' ) или __( 'Список страниц', 'text_domain' ).
            'items_list_navigation' => __( 'Постраничная навигация', 'text_domain' ), // Текст Screen reader для постраничной навигации в разделе всех записей/страниц. По умолчанию: __( 'Постраничная навигация', 'text_domain' ).
            'filter_items_list' => __( 'Фильтр', 'text_domain' ), // Текст Screen reader для фильтра в разделе всех записей/страниц. По умолчанию: __( 'Фильтр', 'text_domain' ).
        ),
        'description' => '', // Короткое описание записи/страницы. По умолчанию: ''.
        'public' => true, // Управление видимостью в админ-панели ('show_in_nav_menus', 'show_ui') и внешнем фронтэнде ('exclude_from_search', 'publicly_queryable'). По умолчанию: false.
        'exclude_from_search' => true, // Исключить ли записи из результатов поиска фронтэнда. По умолчанию: значение аргумента 'public'.
        'publicly_queryable' => true, // Доступность на внешнем сайте: могут ли запросы быть выполненными во фронтэнде как часть parse_request(). По умолчанию: значение аргумента 'public'.
        'show_ui' => true, // Возможность управления данным пользовательским типом записи в админ-панели. По умолчанию: значение аргумента 'public'.
        'show_in_nav_menus' => true, // Доступность данного пользовательского типа записи в навигационном меню сайта. По умолчанию: значение аргумента 'public'.
        'show_in_menu' => true, // Показывать ли тип записи в админ-меню. Значение аргумента 'show_ui' должно быть true. По умолчанию: значение аргумента 'show_ui'.
        'show_in_admin_bar' => true, // Показывать ли тип записи в админ-баре. По умолчанию: значение аргумента 'show_in_menu'.
        'menu_position' => 5, /* Порядок расположения в админ-меню. Значение аргумента 'show_in_menu' должно быть true. По умолчанию: null - после пункта 'Комментарии'.
        Возможные значения:
        5 - после пункта 'Записи';
        10 - после пункта 'Медиафайлы';
        20 - после пункта 'Страницы';
        25 - после пункта 'Комментарии';
        60 - после пункта 'Внешний вид';
        65 - после пункта 'Плагины';
        70 - после пункта 'Пользователи';
        75 - после пункта 'Инструменты';
        80 - после пункта 'Настройки'.
        */
        'menu_icon' => 'dashicons-editor-textcolor', // URL для загрузки изображения в админ-меню. По умолчанию: null - используется изображение пункта меню 'Записи'. Ссылки на изображения доступны здесь: https://developer.wordpress.org/resource/dashicons/  
        /* Массив полномочий зарегестрированных пользователей для этого типа записи:
        'capability_type' => 'post',
        'capabilities' => array(
            'edit_post' => 'edit_news', 
            'read_post' => 'read_news', 
            'delete_post' => 'delete_news', 
            'edit_posts' => 'edit_news', 
            'edit_others_posts' => 'edit_others_news', 
            'publish_posts' => 'publish_news',       
            'read_private_posts' => 'read_private_news', 
            'create_posts' => 'edit_news', 
        ),
        */
        'map_meta_cap' => null, // Использовать ли внутренние значения по умолчанию для управления правами. По умолчанию: null.
        'hierarchical' => false, // Является ли тип записи иерархическим (т.е. страницей). Позволяет установливать родительскую страницу. По умолчанию: false.
        // Управление полями для редактирования объекта типа записи. По умолчанию: значения 'title' и 'editor'.
        'supports' => array(
            'title', // Заголовок объекта типа записи.
            'editor', // Редактор контента.
            //'author', // Автор.
            'thumbnail', // Миниатюра.
            'excerpt', // Цитата, отрывок.
            //'trackbacks', // Отправить обратные ссылки.
            'custom-fields', // Произвольные поля.
            //'comments', // Комментарии.
            //'revisions', // Сохраняет версии.
            'page-attributes', // Атрибуты.
            //'post-formats', // Формат записи.
        ),
        'register_meta_box_cb' => null, // Обеспечивает обратный вызов функции, которая требуется при настройке метабоксов в разделе редактирования. По умолчанию: null.
        'taxonomies' => array('taxsertif'), // Массив связанных таксономий для данного типа записи. Пользовательскую таксономию необходимо зарегестрировать через функцию register_taxonomy(). По умолчанию: без таксономий.
        'has_archive' => false, // Включает архивы данного типа записи. Будет использоваться значение $post_type как ярлык архива по умолчанию. По умолчанию: false
        // Возможность перезаписи для данного типа записи. Чтобы предотвратить перезапись, используют значение false. По умолчанию: true и значение $post_type используется как ярлык.
        'rewrite' => array(
            'slug' => 'sertif', // Текст в ссылке. По умолчанию: значение $post_type.
            'with_front' => true, // Должна ли структура ссылки быть с базовым URL. Пример: если структура ссылки /blog/, то ссылка при соответствующих параметрах 'with_front' выглядит так: false->/news/, true->/blog/news/). По умолчанию: true.
            'feeds' => false, // Должна ли структура постоянных ссылок быть встроена для этого типа записи. По умолчанию: значение 'has_archive'.
            'pages' => true, // Должна ли структура ссылок обеспечена быть постраничной навигацией. По умолчанию: true.
        ),
        'permalink_epmask' => EP_PERMALINK, // Перезаписывает конечное значение. По умолчанию: EP_PERMALINK.
        'query_var' => true, // Задается значение запроса для данного типа записи. По умолчанию: true - задается значение $post_type.
        'can_export' => true, // Возможность данного типа записи быть экспортированным. По умолчанию: true.
        'delete_with_user' => null, // Удалять ли записи данного типа при удалении их автора. По умолчанию: null.
        'show_in_rest' => false, // Представлять ли этот тип записи в REST API. По умолчанию: false.
        'rest_base' => $post_type, // Базовый ярлык данного типа записи когда доступно использование REST API. По умолчанию: значение $post_type.
        '_builtin' => false, // Является ли этот тип записи собственным или встроенным. Рекомендация: не использовать этот аргумент при регистрации собственного типа сообщения. По умолчанию: false.
    );
    register_post_type( 'sertif', $args );
}

/*add_image_size( 'sertif_thumb', 275, 180, true );*/


/*
add_action('init', 'create_taxonomy_sertif');
function create_taxonomy_sertif(){
	// список параметров: http://wp-kama.ru/function/get_taxonomy_labels
	register_taxonomy('taxonomy', array('sertif'), array(
		'label'                 => '', // определяется параметром $labels->name
		'labels'                => array(
			'name'              => 'Сертификаты',
			'singular_name'     => 'Сертификат',
			'search_items'      => 'Поиск сертификатов',
			'all_items'         => 'Все сертификаты',
			'view_item '        => 'Просмотр сертификата',
			'parent_item'       => 'Родительский сертификат',
			'parent_item_colon' => 'Родительский сертификат:',
			'edit_item'         => 'Редактировать сертификат',
			'update_item'       => 'Обновить сертификат',
			'add_new_item'      => 'Добавить сертификат',
			'new_item_name'     => 'Название сертификата',
			'menu_name'         => 'Сертификаты',
		),
		'description'           => '', // описание таксономии
		'public'                => true,
		'publicly_queryable'    => null, // равен аргументу public
		'show_in_nav_menus'     => true, // равен аргументу public
		'show_ui'               => true, // равен аргументу public
		'show_tagcloud'         => true, // равен аргументу show_ui
		'show_in_rest'          => null, // добавить в REST API
		'rest_base'             => null, // $taxonomy
		'hierarchical'          => false,
		'update_count_callback' => '',
		'rewrite'               => true,
		//'query_var'             => $taxonomy, // название параметра запроса
		'capabilities'          => array(),
		'meta_box_cb'           => null, // callback функция. Отвечает за html код метабокса (с версии 3.8): post_categories_meta_box или post_tags_meta_box. Если указать false, то метабокс будет отключен вообще
		'show_admin_column'     => false, // Позволить или нет авто-создание колонки таксономии в таблице ассоциированного типа записи. (с версии 3.5)
		'_builtin'              => false,
		'show_in_quick_edit'    => null, // по умолчанию значение show_ui
	) );
}

register_post_type('sertif', )*/

?>